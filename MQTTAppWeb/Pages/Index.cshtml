@page
@model IndexModel
@{
    
    ViewData["Title"] = "Home page";
}

<link rel="stylesheet" href="~/scripts/xterm/css/xterm.css" />
<script src="~/scripts/xterm/lib/xterm.js"></script>
<script src="~/scripts/xterm-addon-fit/lib/xterm-addon-fit.js"></script>
<script src="~/scripts/xterm-addon-attach/lib/xterm-addon-attach.js"></script>


<div class="container-box">
    <div class="container-header">
        <h2>命令行</h2>
    </div>
    <section>
        <div id="log" style="margin-top:20px;">
            <div class="console" id="terminal"></div>
        </div>
    </section>
</div>


<script>
    var term = new Terminal({
        fontSize: 14,
        fontFamily: 'Consolas, "Courier New", monospace',
        bellStyle: "sound",
        cursorBlink: true,
        convertEol: true, //启用时，光标将设置为下一行的开头
    });

    const fitAddon = new FitAddon.FitAddon();
    term.loadAddon(fitAddon);
    var wSocket = new WebSocket("ws://localhost:5000/ws");
    wSocket.onopen = function (event) {
        console.log("Socket Open");
        //term.attach(wSocket, false, false);
        const attachAddon = new AttachAddon.AttachAddon(wSocket);
        term.loadAddon(attachAddon);
        window.setInterval(function () {
            wSocket.send(JSON.stringify({ "refresh": "" }));
        }, 70000);
    };

    wSocket.onerror = function (event) {
        term.detach(wSocket);
        alert("Connection Closed");
    }
  

    term.open(document.getElementById('terminal'));
    term.write('Hello from \x1B[1;3;31mwebterm\x1B[0m $ ');

    //term.open(containerElement);
    fitAddon.fit();
    term.focus();
        
 
    var firstBash = "\r\n $";
    function runFakeTerminal() {
        if (term._initialized) {
            return;
        }

        term._initialized = true;

        term.prompt = () => {
            term.write('\r\n$ ');
        };

        term.writeln('Welcome to webterm');
        term.writeln('Type some keys and commands to play around.');
        term.writeln('');
        prompt(term);

        term.onKey(e => {
            const printable = !e.domEvent.altKey && !e.domEvent.altGraphKey && !e.domEvent.ctrlKey && !e.domEvent.metaKey;

            if (e.domEvent.keyCode === 13) {
                prompt(term);
            } else if (e.domEvent.keyCode === 8) {
                // Do not delete the prompt
                if (term._core.buffer.x > 2) {
                    term.write('\b \b');
                }
            } else if (printable) {
               // term.write(e.key);
            }
        });
  
    }
    var _this = this;
    this.firstConnect = true;
    //  term.onData(data => {
    //    var order = {
    //        Op: "stdin",
    //        Data: data,
    //        Cols: 140,
    //        Rows: 24,
    //    };
    //    this.wSocket.send(JSON.stringify({ order }));
    //});
    //wSocket.onmessage = (evt) => {
    //    if (evt.data.length > 1) {
    //        var str = evt.data.substr(1, evt.data.length - 1);
    //        _this.term.write(" $" + str);
    //        _this.term.write("\r\n $");
    //     /*   _this.term.write("\r\n $" + _this.firstBash);*/
    //        //var arr = JSON.parse(str);
    //        //if (code === 13 && _this.firstBash !== JSON.parse(arr[0]).Data) {
    //        //    _this.term.write(" $" + JSON.parse(arr[0]).Data);
    //        //    _this.term.write("\r\n $" + _this.firstBash);
    //        //}
    //    }
    //};
    var input = '';
    term.onData(function (data) {
        var code = data.charCodeAt(0);
        if(code == 13 ){
            _this.term.write('\r\n');
            var cmd = {
                    Op: "stdin",
                    Data: input,
                    Cols: 140,
                    Rows: 24,
                };
            _this.wSocket.send(JSON.stringify({ cmd }));
           /* _this.wSocket.send(input);*/
            _this.wSocket.onmessage = function(e) {
                _this.term.writeln(e.data);
                _this.term.write("~$ ")
                console.log(e.data);
            }
            input = '';
        }else{
            input += data
            _this.term.write(data);

        }
    });

    function prompt(term) {
        term.write('\r\n$ ');
    }
    runFakeTerminal();
</script>